diff --git a/modules/presence/bind_presence.c b/modules/presence/bind_presence.c
index 2392a81..6e518e4 100644
--- a/modules/presence/bind_presence.c
+++ b/modules/presence/bind_presence.c
@@ -72,7 +72,9 @@ int bind_presence(presence_api_t* api)
 	api->handle_publish= handle_publish;
 	api->handle_subscribe0= handle_subscribe0;
 	api->handle_subscribe= handle_subscribe;
+	api->notify_watchers = pres_notify_watchers;
 	return 0;
+
 }
 
 
diff --git a/modules/presence/bind_presence.h b/modules/presence/bind_presence.h
index a24ac19..f7ef155 100644
--- a/modules/presence/bind_presence.h
+++ b/modules/presence/bind_presence.h
@@ -48,6 +48,8 @@ typedef int (*pres_handle_publish_t)(struct sip_msg* msg, char *str1, char* str2
 typedef int (*pres_handle_subscribe0_t)(struct sip_msg* msg);
 typedef int (*pres_handle_subscribe_t)(struct sip_msg* msg, str watcher_user, str watcher_domain);
 
+typedef int (*pres_notify_watchers_t)(str* user_uri, str* event, str* body);
+
 typedef struct presence_api {
 	add_event_t add_event;
 	contains_event_t contains_event;
@@ -71,6 +73,7 @@ typedef struct presence_api {
 	pres_handle_publish_t handle_publish;
 	pres_handle_subscribe0_t handle_subscribe0;
 	pres_handle_subscribe_t handle_subscribe;
+	pres_notify_watchers_t notify_watchers;
 } presence_api_t;
 
 int bind_presence(presence_api_t* api);
diff --git a/modules/presence/hash.c b/modules/presence/hash.c
index c7d366a..aee9270 100644
--- a/modules/presence/hash.c
+++ b/modules/presence/hash.c
@@ -287,6 +287,7 @@ int delete_shtable(shtable_t htable,unsigned int hash_code,str to_tag)
 		
 	while(s)
 	{
+		LM_INFO("Totag: %.*s\n", s->to_tag.len, s->to_tag.s);
 		if(s->to_tag.len== to_tag.len &&
 				strncmp(s->to_tag.s, to_tag.s, to_tag.len)== 0)
 		{
diff --git a/modules/presence/notify.c b/modules/presence/notify.c
index d06fa6c..09e195c 100644
--- a/modules/presence/notify.c
+++ b/modules/presence/notify.c
@@ -3011,3 +3011,85 @@ void pres_timer_send_notify(unsigned int ticks, void *param)
 		return;
 	}
 }
+
+int pres_notify_watchers(str* pres_uri, str* event_str, str* body)
+{
+	event_t m_ev;
+	pres_ev_t* event;
+	struct sip_uri uri;
+	str *aux_body = NULL;
+	subs_t* subs_array= NULL, *s= NULL;
+	int ret_code= -1;
+	str user, domain;
+	str* notify_body = NULL;
+
+	memset(&m_ev, 0, sizeof(event_t));
+
+	if (event_parser(event_str->s, event_str->len, &m_ev) < 0) {
+		LM_ERR("failed to parse event\n");
+		return -1;
+	}
+	event= search_event(&m_ev);
+	if(event== NULL) {
+		LM_ERR("Event not supported\n");
+		return -1;
+	}
+
+	if (parse_uri(pres_uri->s, pres_uri->len, &uri) < 0) {
+		LM_ERR("Wrong formated uri\n");
+		return -1;
+	}
+	user = uri.user;
+	domain = uri.host; 
+
+	subs_array= get_subs_dialog(pres_uri, event , NULL);
+	if(subs_array == NULL)
+	{
+		LM_DBG("Could not find subs_dialog\n");
+		ret_code= 0;
+		goto done;
+	}
+
+	/* if the event does not require aggregation - we have the final body */
+	if(body == NULL)
+	{	
+		notify_body = get_p_notify_body(*pres_uri, event , NULL, NULL);
+		if(notify_body == NULL)
+		{
+			LM_ERR("Could not get the notify_body\n");
+			goto done;
+		}
+	}
+
+	s= subs_array;
+	while(s)
+	{
+		if (event->aux_body_processing) {
+			LM_INFO("aux_body_processing defined\n");
+			aux_body = event->aux_body_processing(s, notify_body?notify_body:body);
+			LM_INFO("After auxiliary processing the body is [%.*s]\n", aux_body->len, aux_body->s);
+		}
+
+
+		if(notify(s, NULL, aux_body?aux_body:(notify_body?notify_body:body), 0)< 0 )
+		{
+			LM_ERR("Could not send notify for %.*s\n",
+					event->name.len, event->name.s);
+		}
+
+		if(aux_body!=NULL) {
+			if(aux_body->s)	{
+				event->aux_free_body(aux_body->s);
+			}
+			pkg_free(aux_body);
+		}
+		s= s->next;
+	}
+	ret_code= 0;
+
+done:
+	free_subs_list(subs_array, PKG_MEM_TYPE, 0);
+	free_notify_body(notify_body, event);	
+	return ret_code;
+}
+
diff --git a/modules/presence/notify.h b/modules/presence/notify.h
index 2eb91e4..ed5425d 100644
--- a/modules/presence/notify.h
+++ b/modules/presence/notify.h
@@ -124,4 +124,7 @@ char* get_status_str(int flag);
 str *get_p_notify_body(str pres_uri, pres_ev_t *event, str *etag, str *contact);
 void free_notify_body(str *body, pres_ev_t *ev);
 void pres_timer_send_notify(unsigned int ticks, void *param);
+
+int pres_notify_watchers(str* user_uri, str* event, str* body);
+
 #endif
diff --git a/modules/presence/presence.c b/modules/presence/presence.c
index ed7f4d1..ebefb4e 100644
--- a/modules/presence/presence.c
+++ b/modules/presence/presence.c
@@ -311,6 +311,8 @@ static int mod_init(void)
 		return -1;
 	}
 
+	
+	#if 0
 	/*verify table versions */
 	if((db_check_table_version(&pa_dbf, pa_db, &presentity_table, P_TABLE_VERSION) < 0) ||
 		(db_check_table_version(&pa_dbf, pa_db, &watchers_table, S_TABLE_VERSION) < 0)) {
@@ -323,6 +325,7 @@ static int mod_init(void)
 		LM_ERR("wrong table version for %s\n", active_watchers_table.s);
 		return -1;
 	}
+	#endif
 
 	if(subs_dbmode != DB_ONLY) {
 		if(shtable_size< 1)
@@ -336,7 +339,7 @@ static int mod_init(void)
 			LM_ERR(" initializing subscribe hash table\n");
 			return -1;
 		}
-		if(restore_db_subs()< 0)
+		if(subs_dbmode!=NO_DB && restore_db_subs()< 0)
 		{
 			LM_ERR("restoring subscribe info from database\n");
 			return -1;
@@ -356,11 +359,13 @@ static int mod_init(void)
 			return -1;
 		}
 
+#if 0
 		if(pres_htable_restore()< 0)
 		{
 			LM_ERR("filling in presentity hash table from database\n");
 			return -1;
 		}
+#endif
 	}
 
 	startup_time = (int) time(NULL);
@@ -392,10 +397,10 @@ static int mod_init(void)
 
 		register_basic_timers(pres_notifier_processes);
 	}
-
+#if 0
 	pa_dbf.close(pa_db);
 	pa_db = NULL;
-
+#endif
 	return 0;
 }
 
@@ -671,6 +676,7 @@ error:
 	return -1;
 }
 
+
 /*! \brief
  *  mi cmd: refreshWatchers
  *			\<presentity_uri> 
diff --git a/modules/presence/subscribe.c b/modules/presence/subscribe.c
index 655f1d3..5d4a660 100644
--- a/modules/presence/subscribe.c
+++ b/modules/presence/subscribe.c
@@ -460,6 +460,8 @@ void delete_subs(str* pres_uri, str* ev_name, str* to_tag,
 	if(subs_dbmode != DB_ONLY)
 	{
 		unsigned int hash_code= core_hash(pres_uri, ev_name, shtable_size);
+		LM_INFO("Pres_uri=[%.*s], ev_name=[%.*s] to_tag=[%.*s]\n", pres_uri->len, pres_uri->s,
+			 ev_name->len, ev_name->s, to_tag->len, to_tag->s);
 		if(delete_shtable(subs_htable, hash_code, *to_tag) < 0)
 			LM_ERR("Failed to delete subscription from memory\n");
 	}
diff --git a/modules/pua/pua.c b/modules/pua/pua.c
index 900e582..48f0534 100644
--- a/modules/pua/pua.c
+++ b/modules/pua/pua.c
@@ -207,11 +207,11 @@ static int mod_init(void)
 		return -1;
 	}
 	/* verify table version  */
-	if(db_check_table_version(&pua_dbf, pua_db, &db_table, PUA_TABLE_VERSION) < 0) {
+/*	if(db_check_table_version(&pua_dbf, pua_db, &db_table, PUA_TABLE_VERSION) < 0) {
 		LM_ERR("error during table version check.\n");
 		return -1;
 	}
-
+*/
 	if (dbmode != PUA_DB_ONLY)
 	{ 
 		if(HASH_SIZE<=1)
diff --git a/modules/pua_dialoginfo/Makefile b/modules/pua_dialoginfo/Makefile
index f99f41f..fbb9f43 100644
--- a/modules/pua_dialoginfo/Makefile
+++ b/modules/pua_dialoginfo/Makefile
@@ -19,5 +19,7 @@ else
 endif
 
 DEFS+=-DKAMAILIO_MOD_INTERFACE
+SERLIBPATH=../../lib
+SER_LIBS+=$(SERLIBPATH)/srdb1/srdb1
 
 include ../../Makefile.modules
diff --git a/modules/pua_dialoginfo/dialog_publish.c b/modules/pua_dialoginfo/dialog_publish.c
index 95b6cb3..843bd59 100644
--- a/modules/pua_dialoginfo/dialog_publish.c
+++ b/modules/pua_dialoginfo/dialog_publish.c
@@ -57,7 +57,7 @@ void print_publ(publ_info_t* p)
 
 str* build_dialoginfo(char *state, str *entity, str *peer, str *callid, 
 	unsigned int initiator, str *localtag, str *remotetag,
-	str *localtarget, str *remotetarget)
+	str *localtarget, str *remotetarget, int version)
 {
 	xmlDocPtr  doc = NULL; 
 	xmlNodePtr root_node = NULL;
@@ -91,8 +91,11 @@ str* build_dialoginfo(char *state, str *entity, str *peer, str *callid,
 			BAD_CAST "urn:ietf:params:xml:ns:dialog-info");
 	/* we set the version to 0 but it should be set to the correct value
        in the pua module */
-	xmlNewProp(root_node, BAD_CAST "version",
-			BAD_CAST "0");
+
+    xmlNewProp(root_node, BAD_CAST "version", BAD_CAST "00000000000");
+//	char* p = int2str(version, 0);
+//	xmlNewProp(root_node, BAD_CAST "version",
+//			BAD_CAST p);
 	xmlNewProp(root_node, BAD_CAST  "state",
 			BAD_CAST "full" );
 	xmlNewProp(root_node, BAD_CAST "entity", 
@@ -260,6 +263,76 @@ error:
 	return NULL;
 }	
 
+/* {"From-User": "uri", "To-User": "uri", "New-State": "state", "Call-ID": "callid", 
+ *  "From-Tag": "tag", "To-tag": "tag"}
+ * {"Replaces": "", "Refered-By": ""} */
+
+static str from_user_col = str_init("from_user");
+static str to_user_col   = str_init("to_user");
+static str state_col     = str_init("state");
+static str callid_col    = str_init("callid");
+static str from_tag_col = str_init("from_tag");
+static str to_tag_col   = str_init("to_tag");
+
+void db_dialog_publish(char *state, str *from_user, str *to_user, str *callid,
+	str *from_tag, str *to_tag)
+{
+	db_key_t key[6];
+	db_val_t val[6];
+	int n = 0;	
+
+	memset(val, 0, 6*sizeof(db_val_t));
+
+	key[n] = &from_user_col;
+	val[n].type = DB1_STR;
+	val[n].val.str_val = *from_user;
+ 	n++;
+
+	key[n] = &to_user_col;
+	val[n].type = DB1_STR;
+	val[n].val.str_val = *to_user;
+ 	n++;
+ 
+	key[n] = &state_col;
+	val[n].type = DB1_STR;
+	val[n].val.str_val.s = state;
+	val[n].val.str_val.len = strlen(state);
+ 	n++;
+ 
+	key[n] = &callid_col;
+	val[n].type = DB1_STR;
+	val[n].val.str_val = *callid;
+ 	n++;
+ 
+	key[n] = &from_tag_col;
+	val[n].type = DB1_STR;
+	if (from_tag) {
+		val[n].val.str_val = *from_tag;
+	} else {
+		val[n].val.str_val.s = 0;
+		val[n].val.str_val.len = 0;
+	}
+ 	n++;
+
+	key[n] = &to_tag_col;
+	val[n].type = DB1_STR;
+	if (to_tag) {
+		val[n].val.str_val = *to_tag;
+	} else {
+		val[n].val.str_val.s = 0;
+		val[n].val.str_val.len = 0;
+	}
+ 	n++;
+	
+	if(pua_dialoginfo_dbf.use_table(pua_dialoginfo_db, &dialoginfo_db_table)< 0) {
+		LM_ERR("use table failed\n");
+	}
+
+	if (pua_dialoginfo_dbf.insert_update(pua_dialoginfo_db, key, val, n) < 0) {
+		LM_ERR("Insert update failed\n");
+	}
+}
+
 void dialog_publish(char *state, str* ruri, str *entity, str *peer, str *callid,
 	unsigned int initiator, unsigned int lifetime, str *localtag, str *remotetag,
 	str *localtarget, str *remotetarget, unsigned short do_pubruri_localcheck)
@@ -290,7 +363,7 @@ void dialog_publish(char *state, str* ruri, str *entity, str *peer, str *callid,
 	content_type.s= "application/dialog-info+xml";
 	content_type.len= 27;
 
-	body= build_dialoginfo(state, entity, peer, callid, initiator, localtag, remotetag, localtarget, remotetarget);
+	body= build_dialoginfo(state, entity, peer, callid, initiator, localtag, remotetag, localtarget, remotetarget, 0);
 	if(body == NULL || body->s == NULL)
 		goto error;
 	
@@ -377,14 +450,18 @@ error:
 }
 
 
-
 void dialog_publish_multi(char *state, struct str_list* ruris, str *entity, str *peer, str *callid,
 	unsigned int initiator, unsigned int lifetime, str *localtag, str *remotetag,
 	str *localtarget, str *remotetarget, unsigned short do_pubruri_localcheck) {
 
 	while(ruris) {
 		LM_INFO("CALLING dialog_publish for URI %.*s\n",ruris->s.len, ruris->s.s);
-		dialog_publish(state,&(ruris->s),entity,peer,callid,initiator,lifetime,localtag,remotetag,localtarget,remotetarget,do_pubruri_localcheck);
+		if ( pua_dialoginfo_db ) {
+			if (initiator)
+				db_dialog_publish(state, entity, peer, callid, localtag, remotetag);
+		} else {
+			dialog_publish(state,&(ruris->s),entity,peer,callid,initiator,lifetime,localtag,remotetag,localtarget,remotetarget,do_pubruri_localcheck);
+		}
 		ruris=ruris->next;
 	}
 
diff --git a/modules/pua_dialoginfo/pua_dialoginfo.c b/modules/pua_dialoginfo/pua_dialoginfo.c
index 9c842b0..e51ce70 100644
--- a/modules/pua_dialoginfo/pua_dialoginfo.c
+++ b/modules/pua_dialoginfo/pua_dialoginfo.c
@@ -46,10 +46,12 @@
 #include "../../str_list.h"
 #include "../../mem/mem.h"
 #include "../../pt.h"
+#include "../../lib/srdb1/db.h"
 #include "../dialog/dlg_load.h"
 #include "../dialog/dlg_hash.h"
 #include "../pua/pua_bind.h"
 #include "pua_dialoginfo.h"
+#include "bind_dialoginfo.h"
 
 MODULE_VERSION
 
@@ -92,16 +94,23 @@ int send_publish_flag = DEF_SEND_PUBLISH_FLAG;
 int use_pubruri_avps    = DEF_USE_PUBRURI_AVPS;
 char * pubruri_caller_avp  = DEF_PUBRURI_CALLER_AVP;
 char * pubruri_callee_avp  = DEF_PUBRURI_CALLEE_AVP;
-
+str db_url = {0, 0};
+str dialoginfo_db_table = str_init("dialoginfo");
+db1_con_t *pua_dialoginfo_db = NULL;
+db_func_t pua_dialoginfo_dbf;
+int library_mode = 0; 
 
 send_publish_t pua_send_publish;
 /** module functions */
 
 static int mod_init(void);
+static int child_init(int rank);
+static void mod_destroy(void);
 
 
 static cmd_export_t cmds[]=
 {
+	{"bind_pua_dialoginfo", (cmd_function)bind_pua_dialoginfo, 1, 0, 0, 0},
 	{0, 0, 0, 0, 0, 0} 
 };
 
@@ -116,6 +125,8 @@ static param_export_t params[]={
 	{"use_pubruri_avps",    INT_PARAM, &use_pubruri_avps },
 	{"pubruri_caller_avp",  STR_PARAM, &pubruri_caller_avp },
 	{"pubruri_callee_avp",  STR_PARAM, &pubruri_callee_avp },
+	{"db_url",              STR_PARAM, &db_url.s},
+	{"library_mode",        INT_PARAM, &library_mode},
 	{0, 0, 0 }
 };
 
@@ -130,8 +141,8 @@ struct module_exports exports= {
 	0,						/* extra processes */
 	mod_init,				/* module initialization function */
 	0,						/* response handling function */
-	0,						/* destroy function */
-	NULL					/* per-child init function */
+	mod_destroy,				/* destroy function */
+	child_init				/* per-child init function */
 };
 	
 
@@ -479,10 +490,12 @@ __dialog_created(struct dlg_cell *dlg, int type, struct dlg_cb_params *_params)
 static int mod_init(void)
 {
 	bind_pua_t bind_pua;
-
 	str s;
 	pv_spec_t avp_spec;
 	
+	if ( library_mode )
+		return 0;
+
 	bind_pua= (bind_pua_t)find_export("bind_pua", 1,0);
 	if (!bind_pua)
 	{
@@ -542,6 +555,15 @@ static int mod_init(void)
 
 	}
 
+	db_url.len = db_url.s ? strlen(db_url.s) : 0;
+	dialoginfo_db_table.len = dialoginfo_db_table.s ? strlen(dialoginfo_db_table.s) : 0;
+
+	/* binding to database module  */
+	if (db_url.len && db_bind_mod(&db_url, &pua_dialoginfo_dbf)) {
+		LM_ERR("Database module not found\n");
+		return -1;
+	}
+
 	return 0;
 }
 
@@ -572,3 +594,51 @@ void free_str_list_all(struct str_list * del_current) {
 	}
 
 }
+
+int bind_pua_dialoginfo(pua_dialoginfo_api_t* api)
+{
+	if (!api) {
+		LM_ERR("Invalid parameter value\n");
+		return -1;
+	}
+	
+	api->build_dialoginfo = build_dialoginfo;
+	return 0;
+}
+
+static int child_init(int rank)
+{
+	if ( library_mode )
+		return 0;
+	
+	if (rank==PROC_INIT || rank==PROC_MAIN || rank==PROC_TCP_MAIN)
+		return 0; /* do nothing for the main process */
+
+	if (pua_dialoginfo_dbf.init==0) {
+		LM_INFO("database not bound\n");
+		return 0;
+	}
+	/* In DB only mode do not pool the connections where possible. */
+	if ( (pua_dialoginfo_db = pua_dialoginfo_dbf.init(&db_url)) == NULL) {
+		LM_ERR("Child %d: connecting to database failed\n", rank);
+		return -1;
+	}
+	if (pua_dialoginfo_dbf.use_table(pua_dialoginfo_db, &dialoginfo_db_table) < 0) {
+		LM_ERR("child %d: Error in use_table pua\n", rank);
+		return -1;
+	}
+
+	LM_DBG("child %d: Database connection opened successfully\n", rank);
+
+	return 0;
+}
+
+
+static void mod_destroy(void)
+{
+	if ( library_mode )
+		return;
+	
+	if (pua_dialoginfo_db) 
+		pua_dialoginfo_dbf.close(pua_dialoginfo_db);
+}
diff --git a/modules/pua_dialoginfo/pua_dialoginfo.h b/modules/pua_dialoginfo/pua_dialoginfo.h
index f6e43b6..c2d002a 100644
--- a/modules/pua_dialoginfo/pua_dialoginfo.h
+++ b/modules/pua_dialoginfo/pua_dialoginfo.h
@@ -26,8 +26,12 @@
 #ifndef _PUA_DLGINFO_H
 #define _PUA_DLGINFO_H
 #include "../pua/pua_bind.h"
+#include "../../lib/srdb1/db.h"
 
 extern send_publish_t pua_send_publish;
+extern str dialoginfo_db_table;
+extern db1_con_t *pua_dialoginfo_db;
+extern db_func_t pua_dialoginfo_dbf;
 
 void dialog_publish_multi(char *state, struct str_list* ruris, str *entity, str *peer, str *callid,
 	unsigned int initiator, unsigned int lifetime, str *localtag, str *remotetag,
@@ -53,4 +57,7 @@ struct dlginfo_cell {
 void free_dlginfo_cell(void *param);
 void free_str_list_all(struct str_list * del_current);
 
+str* build_dialoginfo(char *state, str *entity, str *peer, str *callid, 
+	unsigned int initiator, str *localtag, str *remotetag,
+	str *localtarget, str *remotetarget, int version);
 #endif
