#!KAMAILIO
#
# Kamailio (OpenSER) SIP Server v4.0 
# Presence Server

####### Defined Values #########

# *** Value defines - IDs used later in config
# - database URL - used to connect to database server by modules such
#       as: auth_db, acc, usrloc, a.s.o.

#!define DBURL "kazoo://guest:guest@176.58.119.150:5672/dialoginfo"

####### Global Parameters #########

### LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

memdbg=5
memlog=5

log_facility=LOG_LOCAL1

fork=yes
children=4

/* uncomment the next line to disable TCP (default on) */
#disable_tcp=yes

/* uncomment the next line to disable the auto discovery of local aliases
   based on reverse DNS on IPs (default on) */
#auto_aliases=no

/* add local domain aliases */
alias = "sip.anca-kazoo.com"

/* uncomment and configure the following line if you want Kamailio to 
   bind on a specific interface/port/proto (default bind on all available) */
listen=udp:178.79.172.28:6060

# life time of TCP connection when there is no traffic
# - a bit higher than registration expires to cope with UA behind NAT
tcp_connection_lifetime=3605


####### Custom Parameters #########

# These parameters can be modified runtime via RPC interface
# - see the documentation of 'cfg_rpc' module.
#
# Format: group.id = value 'desc' description
# Access: $sel(cfg_get.group.id) or @cfg_get.group.id
#

####### Modules Section ########

# set paths to location of modules (to sources or installation folders)
mpath="/usr/local/kamailio_blf/lib64/kamailio/modules/"

#loadmodule "db_mysql.so"
loadmodule "pua_dialoginfo.so"
loadmodule "mi_fifo.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "htable.so"
loadmodule "db_kazoo.so"
loadmodule "sl.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "presence.so"
loadmodule "presence_dialoginfo.so"

# ----------------- setting module-specific parameters ---------------


# ----- mi_fifo params -----
modparam("mi_fifo", "fifo_name", "/tmp/kamailio_blf_fifo")

# ----- presence params -----
modparam("presence", "db_url", DBURL)
modparam("presence", "subs_db_mode", 1)
modparam("pua_dialoginfo", "library_mode", 1)

modparam("htable", "htable", "dbkp=>size=4;autoexpire=7200")

modparam("db_kazoo", "node_hostname", "anca-kamailio.com")

####### Routing Logic ########


# Main SIP request routing logic
# - processing of any incoming SIP request starts with this route
# - note: this is the same as route { ... }
request_route {

	# per request initial checks
	route(REQINIT);

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### only initial requests (no To tag)

	t_check_trans();

	# record routing for dialog forming requests (in case they are routed)
	# - remove preloaded route headers
	remove_hf("Route");

	# handle presence related requests
	route(PRESENCE);
		
	send_reply("404", "Not here or bad");
}

# Per SIP request initial checks
route[REQINIT] {
	if (!mf_process_maxfwd_header("10")) {
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	if(!sanity_check("1511", "7"))
	{
		xlog("Malformed SIP message from $si:$sp\n");
		exit;
	}

	if (is_method("OPTIONS")) {
		sl_send_reply("200", "Ok");
		exit;
	}

	if (!is_method("SUBSCRIBE|PUBLISH")) {
		send_reply("405", "Method not allowed");
		exit;
	}

	if (!uri==myself) {
		send_reply("404","Not here");
		exit;
	}
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (has_totag()) {
		# sequential request withing a dialog should
		# take the path determined by record-routing
		if (is_method("SUBSCRIBE")) {
			# in-dialog subscribe requests
			route(PRESENCE);
			exit;
		}
		sl_send_reply("405","Method not allowed");
		exit;
	}
}


# Presence server route
route[PRESENCE] {

	if (!t_newtran())
	{
		sl_reply_error();
		exit;
	};

	if(is_method("PUBLISH"))
	{
		handle_publish();
		t_release();
	}
	else
	if( is_method("SUBSCRIBE"))
	{
		handle_subscribe();
		t_release();
	}
	exit;
}
